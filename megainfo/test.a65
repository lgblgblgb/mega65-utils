; -------------------------------------------------------------------------------
;
; MEGA65info - a small utility to get information / simple query tools for MEGA65
;
; Copyright (C)2020 LGB (Gábor Lénárt) <lgblgblgb@gmail.com>
;
; -------------------------------------------------------------------------------
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;
; -------------------------------------------------------------------------------

.SETCPU "4510"

LOAD_ADDR	= $801
VID_MEM_PAGE	= $F0
COLS		= 80	; Do NOT change this, it will break everything, even if you would like to use 40 columns instead :)

SEC_BAR_P	= VID_MEM_PAGE * $100 + 24 * COLS + COLS/2 - 30
SEC_BAR_CHAR	= '.'

; Hint: most colours must be 0-15 value here.
; Unless, if you see two digit hex values, then it's valid for THAT kind of setting ONLY, and high nybble is C65 attribute mode interpreted.

TITLE_COLOUR		= $A
SUBTITLE_COLOUR		= $7
TEXT_COLOUR		= $1
BANNER_COLOUR		= $2D
BCOLON_COLOUR		= $1C
LEGEND_COLOUR		= $C
HEXDUMP_ADDR_COLOUR	= $8
HEXDUMP_BYTE_COLOUR	= TEXT_COLOUR
HEXDUMP_CHAR_COLOUR	= $E
DEFAULT_CRAM_COLOUR	= LEGEND_COLOUR


.MACRO	STA32Z	zploc
	NOP
	STA	(zploc),Z
.ENDMACRO
.MACRO	LDA32Z	zploc
	NOP
	LDA	(zploc),Z
.ENDMACRO
.MACRO	CMP32Z	zploc
	NOP
	CMP	(zploc),Z
.ENDMACRO
.MACRO	HDOSCALL
	STA	$D640	; DOS hypervisor trap on write (I/O mode for M65 should be enabled for this)
	NOP		; A NOP is needed after a trap!
.ENDMACRO


.SEGMENT "BSS"

	.ORG $C000

_frame_time_code_run:	.RES 32
os_version:		.RES 4
hex_buf:		.RES 16
nvram:			.RES 64
xemu_id:		.RES 1
cram_size:		.RES 1
cram_echo:		.REs 1


.SEGMENT "ZEROPAGE"

	.ORG		2

screen_pos_addr:	.RES 2
colour_pos_addr:	.RES 4	; we use lin32 addr for colour RAM, unlike video RAM
addr_p:			.RES 4
colour:			.RES 1
string_p:		.RES 2
glitch_counter:		.RES 2
num:			.RES 2
dump_start_p:		.RES 4
rtc_seconds:		.REs 1
rtc_seconds_old:	.RES 1
refresh_rate:		.RES 1
refresh_rate_temp:	.RES 1

.SEGMENT "CODE"

	.WORD		LOAD_ADDR
	.ORG		LOAD_ADDR

.SCOPE
	.WORD	lastline, $FFFF
	; TODO: for me, BASIC 10 "BANK" keyword is quite confusing. According to the available documentation,
	; It's set the BANK number, with the extension that +128 means the "BASIC configuration" (I/O, etc)
	; However according to my tests, it's not true. Using BANK 128 here, still does not work. What I can
	; found only for a sane C65 loader is using BANK 0 before SYS, and doing all the memory MAP, etc then
	; in machine code for the desired mode. I will do that, in routine init_system, see later.
	;.WORD	$02FE                                   ; "BANK" basic 10 token (double byte token, btw)
	;.BYTE	" 0 : "
	.BYTE	$9E                                     ; "SYS" basic token
	.BYTE	" "
	.BYTE	$30+.LOBYTE((main .MOD 10000)/ 1000)
	.BYTE	$30+.LOBYTE((main .MOD  1000)/  100)
	.BYTE	$30+.LOBYTE((main .MOD   100)/   10)
	.BYTE	$30+.LOBYTE( main .MOD    10)
	.BYTE	0
lastline:
	.WORD	0
.ENDSCOPE

fpga_xemu_const: .BYTE 'X','e','m','u'
cpld_xemu_const: .BYTE 'N','o','w','!'


bcd2bin:
	PHA
	AND	#$0F
	STA	@result
	PLA
	AND	#$F0
	PHA
	LSR	A
	CLC
	@result = * + 1
	ADC	#0
	STA	@result
	PLA
	LSR	A
	LSR	A
	LSR	A
	CLC
	ADC	@result
	RTS



skip:
	PHA
	CLC
	ADC	screen_pos_addr
	STA	screen_pos_addr
	STA	colour_pos_addr
	BCC	:+
	INC	screen_pos_addr + 1
	INC	colour_pos_addr + 1
:	PLA
	RTS


write_hex_byte:
        PHA
        LSR     A
        LSR     A
        LSR     A
        LSR     A
        JSR     write_hex_nybble
        PLA
	; fall-through!
write_hex_nybble:
	PHA
        AND     #$F
        ORA     #'0'
        CMP     #'9'+1
        BCC     :+
        ADC     #6
:	JSR	write_char
	PLA
	RTS
write_char:
	PHA
	PHZ
	LDZ	#0
	STA	(screen_pos_addr),Z
	INW	screen_pos_addr
	LDA	colour
	STA32Z	colour_pos_addr
	INW	colour_pos_addr
	PLZ
	PLA
	RTS


.PROC	write_dec_byte
	PHA
	PHX
	PHY
	PHZ
	STA	num
	LDA	#0
	STA	num+1
	LDY	#0	; non-zero flag
	JSR	_write_dec_byte
	PLZ
	PLY
	PLX
	PLA
	RTS
write_dec_word:
	PHA
	PHX
	PHY
	PHZ
	STA	num
	STX	num+1
	LDY	#0	; non-zero flag
	JSR	_write_dec_word
	PLZ
	PLY
	PLX
	PLA
	RTS
_write_dec_word:
	LDA	#>10000
	STA	minus_val_hi
	LDA	#<10000
	STA	minus_val_lo
	JSR	_write_dec_convert
	;
	LDA	#>1000
	STA	minus_val_hi
	LDA	#<1000
	STA	minus_val_lo
	JSR	_write_dec_convert
	; fall-through
_write_dec_byte:
	LDA	#0
	STA	minus_val_hi
	LDA	#100
	STA	minus_val_lo
	JSR	_write_dec_convert
	;
	LDA	#10
	STA	minus_val_lo
	JSR	_write_dec_convert
	; Reminder, always print
	LDA	num
	BRA	print
_write_dec_convert:
	LDX	#0		; current digit value
	SEC
minus_loop:
	LDA	num
	minus_val_lo = * + 1
	SBC	#0		; no need for SEC as it was before the loop OR within the loop with C set anyway
	TAZ
	LDA	num+1
	minus_val_hi = * + 1
	SBC	#0
	BCC	end_of_minus_loop
	INX
	STZ	num
	STA	num+1
	BRA	minus_loop
end_of_minus_loop:
	TXA		; also sets zero flag
	BEQ	zero
	LDY	#1	; set non-zero-flag
print:
	CLC
	ADC	#'0'
	JMP	write_char
zero:
	CPY	#0
	BNE	print
	RTS
.ENDPROC

write_dec_word = write_dec_byte::write_dec_word





write_space:
	PHA
	LDA	#32
	JSR	write_char
	PLA
	RTS




.MACRO  WRISTR  str
        JSR     write_inline_string
        .BYTE   str
        .BYTE   0
.ENDMACRO

.MACRO	TITLE	xpos,ypos,str
	JSR	write_inline_string
	.BYTE	ITOK_XY xpos,ypos
	.BYTE	ITOK_COLOUR TITLE_COLOUR
	.BYTE	str
	.BYTE	ITOK_COLOUR TEXT_COLOUR
	.BYTE	0
.ENDMACRO

.MACRO	STITLE	str
	JSR	write_inline_string
	.BYTE	ITOK_COLOUR SUBTITLE_COLOUR
	.BYTE	str
	.BYTE	ITOK_COLOUR TEXT_COLOUR
	.BYTE	0
.ENDMACRO

.DEFINE ITOK_XY(xp,yp)	.HIBYTE((yp)*COLS+(xp)+2048), .LOBYTE((yp)*COLS+(xp))
.DEFINE ITOK_COLOUR(n)	(n)+16


write_blinking_colon:
	PHA
	LDA	colour
	PHA
	LDA	#BCOLON_COLOUR
	STA	colour
	LDA	#':'
	JSR	write_char
	PLA
	STA	colour
	PLA
	RTS


write_inline_string:
	STA	@save
        PLA
        STA     string_p
        PLA
        STA     string_p+1
        PHZ
        LDZ     #0
@loop:
        INW     string_p
        LDA     (string_p),Z
        BEQ     @eos
	CMP	#16
	BCC	@gotoxy
	CMP	#32
	BCC	@colour
        JSR     write_char
        BRA     @loop
@eos:
        INW     string_p
        PLZ
	@save	= * + 1
	LDA	#0
        JMP     (string_p)
@colour:
	AND	#$F
	STA	colour
	BRA	@loop
@gotoxy:
	AND	#7
	STA	colour_pos_addr+1
	CLC
	ADC	#VID_MEM_PAGE
	STA	screen_pos_addr+1
	INW	string_p
	LDA	(string_p),Z
	STA	screen_pos_addr
	STA	colour_pos_addr
	BRA	@loop



Lpeek_debounced:
	PHX
@restart:
	LDX	#64
	LDA32Z	addr_p
@cmp_test:
	CMP32Z	addr_p
	BNE	@glitched
	DEX
	BNE	@cmp_test
	PLX
	RTS
@glitched:
	INW	glitch_counter
	BRA	@restart


; A = bits 15-8 of the address to set
addr_to_i2c:
	STA	addr_p+1
	LDA	#$00
	STA	addr_p
	LDA	#$FD
	STA	addr_p+2
	LDA	#$0F
	STA	addr_p+3
	RTS




.PROC	rtc_update_screen
	; Set linear address of RTC stuffs
	LDA	#$71
	JSR	addr_to_i2c
	; Print time
	LDZ	#$12			; Hours
	JSR	Lpeek_debounced
	TAX				; to set flags on Accumulator, ALSO to store original value in X as a backup
	BMI	@directly_hours		; this checks bit7 of result of Lpeek... (jumps if bit7 is set)
	AND	#$20
	BEQ	@not_12_hours
	TXA
	AND	#$1F
	CLC
	SED
	ADC	#12
	CLD
	BRA	@print_hours
@not_12_hours:
	TXA
	AND	#$1F
	BRA	@print_hours
@directly_hours:
	AND	#$3F
	; fall-through
@print_hours:
	JSR	write_hex_byte
	JSR	write_blinking_colon
	DEZ				; mins
	JSR	Lpeek_debounced
	JSR	write_hex_byte
	JSR	write_blinking_colon
	DEZ				; secs
	JSR	Lpeek_debounced
	STA	rtc_seconds
	JSR	write_hex_byte
		LDX	#'R'
		JSR	update_second_bar
	; year, start of date, year is also BCD and relative to 2000, so I guess we can print "20" here. Beware, this program may fail on 2100 Jan 01 ;-P
	WRISTR	" 20"
	LDZ	#$15
	JSR	Lpeek_debounced
	JSR	write_hex_byte
	LDA	#'-'
	JSR	write_char
	DEZ				; month
	JSR	Lpeek_debounced
	JSR	write_hex_byte
	LDA	#'-'
	JSR	write_char
	DEZ				; day
	JSR	Lpeek_debounced
	JSR	write_hex_byte
	STITLE	" I2C-glitch:"		; show glitch counter (as hex num)
	LDA	glitch_counter+1
	JSR	write_hex_byte
	LDA	glitch_counter
	JMP	write_hex_byte
.ENDPROC


; Input A = BCD value of seconds
;       X = char to use
.PROC	update_second_bar
	STX	@char
	JSR	bcd2bin
		CMP	#60	; make sure not overflow (RTC not presents and reading $FF or whatever)
		BCS	@ret
		PHA
		LDX	#59
	:	LDA	SEC_BAR_P,X
		@char = * + 1
		CMP	#0
		BNE	:+
		LDA	#SEC_BAR_CHAR
		STA	SEC_BAR_P,X
	:	DEX
		BPL	:--
		PLX
	LDA	@char
	STA	SEC_BAR_P,X
@ret:
	RTS
.ENDPROC


; !!!! Routine excepts first two bytes of addr_p being to set already to DC00 or DD00 values!
tod_update_screen:
	; TOD
	LDY	#$B			; hours
	LDA	(addr_p),Y
	TAX			; store for later AM/PM handling
	AND	#255-128-64	
	JSR	write_hex_byte
	JSR	write_blinking_colon
	DEY				; mins
	LDA	(addr_p),Y
	JSR	write_hex_byte
	JSR	write_blinking_colon
	DEY				; secs
	LDA	(addr_p),Y
	JSR	write_hex_byte
		PHX
		PHA
		LDA	addr_p+1	; from CIA I/O address hi byte DC/DD form chars '1' or '2' for the second bar
		AND	#1
		CLC
		ADC	#'1'
		TAX
		PLA
		JSR	update_second_bar
		PLX
	LDA	#'.'
	JSR	write_char
	DEY				; 10th of secs
	LDA	(addr_p),Y
	JSR	write_hex_nybble
	; Now AM/PM
	LDY	#'A'
	TXA
	BPL	:+
	LDY	#'P'
:	TYA
	JSR	write_char
	LDA	#'M'
	JSR	write_char
	STITLE	"  Ta:"
	LDA	#5
	LDA	(addr_p),Y
	JSR	write_hex_byte
	DEY
	LDA	(addr_p),Y
	JSR	write_hex_byte
	STITLE	" Tb:"
	LDY	#7
	LDA	(addr_p),Y
	JSR	write_hex_byte
	DEY
	LDA	(addr_p),Y
	JSR	write_hex_byte
	; interrupt counter
	STITLE	" INT:"
	LDA	addr_p+1
	AND	#1
	TAX
	LDA	irq_counter,X
	JSR	write_hex_byte
	RTS


update_clocks_screen:
	TITLE	1,21,"RTC  "
	JSR	rtc_update_screen
	LDA	#$00
	STA	addr_p
	LDA	#$DC
	STA	addr_p+1		; now addr_p = $DC00
	TITLE	1,22,"CIA1 "
	JSR	tod_update_screen
	INC	addr_p+1		; now addr_p = $DD00
	TITLE	1,23,"CIA2 "
	JSR	tod_update_screen
	RTS


update_hwid_screen:
	LDA	$D629
	JSR	write_hex_byte
	JSR	write_space
	CMP	#0
	BEQ	@unknown
	CMP	#$10
	BCC	@mega65_pcb
	CMP	#$FF
	BEQ	@unspecific
	CMP	#$FE
	BEQ	@simulation
	CMP	#$FD
	BEQ	@wukong
	CMP	#$40
	BEQ	@nexys4
	CMP	#$41
	BEQ	@nexys4ddr
	CMP	#$42
	BEQ	@nexys4widget
	; fall-through
@unknown:
	WRISTR	"UNKNOWN"
	RTS
@mega65_pcb:
	WRISTR	"MEGA65 PCB rev "
	JMP	write_hex_nybble
@unspecific:
	WRISTR	"Unspecific/emulator"
	RTS
@simulation:
	WRISTR	"simulation"
	RTS
@wukong:
	WRISTR	"Wukong"
	RTS
@nexys4:
	WRISTR	"Nexys4"
	RTS
@nexys4ddr:
	JSR	@nexys4
	WRISTR	"-DDR"
	RTS
@nexys4widget:
	JSR	@nexys4
	WRISTR	"+Widget"
	RTS



; Gets max scanline number in A (low byte only!)
get_scanlines_vic2:
	PHX
	; if RST8 is set, wait till it's gone
:	BIT	$D011
	BMI	:-
	; Now wait for RST8 is set again
:	BIT	$D011
	BPL	:-
	; Now wait it goes away, also storing RST0-7
:	LDX	$D012
	BIT	$D011
	BPL	:+
	TXA		; yes, RST8 was still set, so OK to use X now as the result so far
	BRA	:-
	; OK.
:	PLX
	RTS


get_scanlines_vic4:
	; wait for start of new frame (physical raster of zero)
:	LDA	$D053
	AND	#7
	BNE	:-
	; wait for high bits of phys raster is non-zero now
:	LDA	$D053
	AND	#7
	BEQ	:-
	; OK, now wait for high bits changes to zero again and store the last low bits when h.bits were non-zero
	; which should be then the max phys raster count
:	LDA	$D053
	AND	#7
	BEQ	:+
	STA	@hi_candidate
	LDA	$D052
	STA	@lo_candidate
	LDA	$D053
	AND	#7
	CMP	@hi_candidate
	BNE	:-
	@lo_candidate = * + 1
	LDA	#0
	STA	@lo_result
	@hi_candidate = * + 1
	LDA	#0
	STA	@hi_result
	BRA	:-
	; End
:	@lo_result = * + 1
	LDA	#0
	@hi_result = * + 1
	LDX	#0
	RTS

; must be PC independent code, it will be copied over to surely have not page crossing code
_frame_time_code_start:
	INX		; n*2 cycles
	BNE	:+	; n*4-n/256 cycles
	INY		; (n/256)*2 cycles
:	CMP	$D012	; n*4 cycles
	BNE	_frame_time_code_start	; n*4-1 cycles
	RTS		; m*6 cycles + m*6 cycles for JSR + m*2 cycles for DEA/INA
_frame_time_code_length = * - _frame_time_code_start + 1


.PROC	get_frame_time
	LDX	#_frame_time_code_length
:	LDY	_frame_time_code_start - 1,X
	STY	_frame_time_code_run - 1,X
	DEX
	BNE	:-
	LDY	#0	; make Y zero too (as X is already that, after the loop above)
	LDA	#64
	STA	0	; C64 speed
	LDA	#250
	; wait for a frame high enough that it can occur without bit8, thus no need to test for bit8 in $D011
:	CMP	$D012
	BNE	:-
	; now waiting for raster one less we were waited, almost a full frame will elapse this way, but more easy to test
	DEA
	JSR	_frame_time_code_run
	; the missing one scanline to wait (probably overkill precision here?!)
	INA
	JSR	_frame_time_code_run
	TYA
	JSR	write_hex_byte
	TXA
	JSR	write_hex_byte
	LDA	#65	; M65 fast speed
	STA	0
	RTS
.ENDPROC

; This should be from $8000000, test every last byte of megabyte, that is:
; $8 0f ff ff first, in one Mbyte steps (+ $10 00 00)
.PROC	get_hram_size
	LDA	#$FF
	STA	addr_p
	STA	addr_p+1
	LDA	#$0F
	STA	addr_p+2
	LDA	#$08
	STA	addr_p+3
	LDX	#0
@mbyte_loop:
	LDA32Z	addr_p
	STA	@restore
	LDA	#0
@byte_loop:
	STA32Z	addr_p
	CMP32Z	addr_p
	BNE	@no_ram
	INA
	BNE	@byte_loop
	@restore = * + 1
	LDA	#0
	STA32Z	addr_p
	INX		; count mbytes
	CLC
	LDA	#$10
	ADC	addr_p + 2
	STA	addr_p + 2
	BCC	@mbyte_loop
	INC	addr_p + 3
	BRA	@mbyte_loop
@no_ram:
	TXA
	RTS
.ENDPROC


.PROC	get_bram_size
	LDA	#$FF
	STA	addr_p
	LDA	#$03
	STA	addr_p+1
	LDA	#$04
	STA	addr_p+2
	LDA	#$00
	STA	addr_p+3
	LDZ	#0
	STZ	num
	LDA	#1	; 256K already
	STA	num+1
	LDZ	#0
@kbyte_loop:
	LDA32Z	addr_p
	STA	@restore
	LDA	#0
@byte_loop:
	STA32Z	addr_p
	CMP32Z	addr_p
	BNE	@no_ram
	INA
	BNE	@byte_loop
	@restore = * + 1
	LDA	#0
	STA32Z	addr_p
	INW	num
	INW	addr_p+1
	INW	addr_p+1
	INW	addr_p+1
	INW	addr_p+1
	BRA	@kbyte_loop
@no_ram:
	LDA	num
	LDX	num+1
	RTS
.ENDPROC


.PROC	update_rom_screen
	LDA	#0
	STA	addr_p
	STA	addr_p + 1
	STA	addr_p + 3
	LDA	#2
	STA	addr_p + 2
	; Test ROM write protection
	LDZ	#$16
	LDX	#'O'
	WRISTR	"R/"
	LDA32Z	addr_p
	INA
	STA32Z	addr_p
	DEA
	CMP32Z	addr_p
	BEQ	:+
	STA32Z	addr_p
	LDX	#'W'
:	TXA
	JSR	write_char
	; Test if ROM has the "version signature" typical for C65 ROMs
	LDA32Z	addr_p
	CMP	#'V'
	BNE	@no_c65_rom
	INZ
:	LDA32Z	addr_p
	INZ
	CMP	#'0'
	BCC	@no_c65_rom
	CMP	#'9' + 1
	BCS	@no_c65_rom
	CPZ	#$16 + 7
	BNE	:-
	WRISTR	" C65 "
	LDZ	#$16
:	LDA32Z	addr_p
	JSR	write_char
	INZ
	CPZ	#$16 + 7
	BNE	:-
	RTS
@no_c65_rom:
	WRISTR	" non-C65"
	RTS
.ENDPROC



.PROC	clear_screen
	PHA
	PHX
	PHZ
	; set default values for pointers
	LDZ	#0
	STZ	cram_echo		; flag, initially zero
	STZ	screen_pos_addr
	STZ	colour_pos_addr
	LDA	#VID_MEM_PAGE
	STA	screen_pos_addr+1
	; Test colour RAM size, it can be only 32K or 64K.
	; Set first byte of colour RAM to a known state. We do this via the I/O area, so we don't need to worry about setting ZP things for the long address mode back and forth
	LDA	#$80
	STA	colour_pos_addr+1	; set colour_pos_addr to the second 32K of colour RAM
	TZA
@test_cram:
	STA	$D800			; set some value for the first byte of first 32K
	DEA				; user ANOTHER value for ...
	STA32Z	colour_pos_addr		; .. the first byte of second 32K
	CMP32Z	colour_pos_addr		; test if the later was OK
	BNE	@k32			; if not, only 32K colour RAM
	CMP	$D800			; compare with the first byte of first 32K
	BEQ	@k32_echo		; if matches, it's still 32K just we see not fully decoded colour RAM
	INA
	INA
	BNE	@test_cram
	LDA	#64
	STA	cram_size
	BRA	@end_cram_test
@k32_echo:
	INC	cram_echo
	; fall-through
@k32:
	LDA	#32
	STA	cram_size
@end_cram_test:
	STZ	colour_pos_addr+1	; restore the colour RAM pointer to the beginning of the colour RAM for writer functions
	; Clear screen and video RAM
	LDX	#8
@clear_loop:
	LDA	#DEFAULT_CRAM_COLOUR
	STA32Z	colour_pos_addr
	LDA	#32
	STA	(screen_pos_addr),Z
	INZ
	BNE	@clear_loop
	INC	colour_pos_addr+1
	INC	screen_pos_addr+1
	DEX
	BNE	@clear_loop
	JSR	write_inline_string
	.BYTE	ITOK_COLOUR TEXT_COLOUR ; set some intial colour
	.BYTE	ITOK_XY 0,0		; set some intial position
	.BYTE	0
	PLZ
	PLX
	PLA
	RTS
.ENDPROC


.PROC	clear_screen_with_logo
	JSR	clear_screen
	JSR	write_inline_string
	.BYTE	" MEGA65info v0.0.2"
	.BYTE	ITOK_XY 55,0
	.BYTE	"(C)2020 LGB Gabor Lenart"
	.BYTE	0
	; Cheating: though all char funcs has colour as well, we force colours as at our own here by writing
	; colour RAM. This is because we have speciality here for the header line, also save code size not
	; to write all the spaces/etc needed as well.
	LDA	#BANNER_COLOUR
	LDX	#79
:	STA	$D800,X
	DEX
	BPL	:-
	RTS
.ENDPROC


hex_dump:
	JSR	write_inline_string
	.BYTE	ITOK_XY 12,2
	.BYTE	ITOK_COLOUR LEGEND_COLOUR
	.BYTE	0
	LDY	addr_p
	LDX	#16
@header_loop_1:
	LDA	#'.'
	JSR	write_char
	TYA
	JSR	write_hex_nybble
	LDA	#1
	JSR	skip
	INY
	DEX
	BNE	@header_loop_1
	LDA	#2
	JSR	skip
	LDY	addr_p
	LDX	#16
@header_loop_2:
	TYA
	JSR	write_hex_nybble
	INY
	DEX
	BNE	@header_loop_2

	JSR	write_inline_string
	.BYTE	ITOK_XY 1,3
	.BYTE	0
	LDZ	#0
	LDY	#16
@within_screen:
	LDA	#HEXDUMP_ADDR_COLOUR
	STA	colour
	LDA	#'.'
	JSR	write_char
	LDA	addr_p+3
	AND	#$0F
	STA	addr_p+3
	JSR	write_hex_nybble
	LDA	addr_p+2
	JSR	write_hex_byte
	LDA	addr_p+1
	JSR	write_hex_byte
	LDA	addr_p
	JSR	write_hex_byte
	LDA	#HEXDUMP_BYTE_COLOUR
	STA	colour
	LDA	#3
	JSR	skip
	LDX	#0
@hex_part:
	LDA32Z	addr_p
	STA	hex_buf,X
	INW	addr_p
	BNE	:+
	INW	addr_p+2
:	JSR	write_hex_byte
	LDA	#' '
;	CPX	#7
;	BNE	:+
;	LDA	#'-'
	JSR	write_char
	INX
	CPX	#16
	BNE	@hex_part
	LDA	#3-1
	JSR	skip
	LDA	#HEXDUMP_CHAR_COLOUR
	STA	colour
	LDX	#0
@text_part:
	LDA	hex_buf,X
	CMP	#32
	BCC	@not_ascii
	CMP	#96
	BCC	@ascii
@not_ascii:
	LDA	#'.'
@ascii:
	JSR	write_char
	INX
	CPX	#16
	BNE	@text_part
	LDA	#COLS-(8+(16*3)-1+16+3+3)
	JSR	skip
	DEY
	BNE	@within_screen
	LDA	#TEXT_COLOUR
	STA	colour
	RTS

.SCOPE	const_addr_tab
	head:
	zero:	.DWORD	0
	io:	.DWORD	$FFD3000
.ENDSCOPE

.MACRO	SET_HEXDUMP_ADDR_FROM_CONST n
	LDX	#const_addr_tab::n - const_addr_tab::head
	JSR	set_hex_dump_addr
.ENDMACRO

set_hex_dump_addr:
	PHA
	PHX
	PHY
	LDY	#0
:	LDA	const_addr_tab::head,X
	STA	dump_start_p,Y
	INX
	INY
	CPY	#4
	BNE	:-
	PLY
	PLX
	PLA
	RTS



hex_dump_mode:
	JSR	clear_screen_with_logo
	JSR	write_inline_string
	.BYTE	ITOK_COLOUR LEGEND_COLOUR
	.BYTE	ITOK_XY 1,20
	.BYTE	"Linear (not CPU) addresses! Text info is ASCII (32-96) based!"
	.BYTE	ITOK_XY 1,22
	.BYTE	"Cursor up/down = scroll by lines, left/down = scroll by pages"
	.BYTE	ITOK_XY 1,23
	.BYTE	"m = main screen, 0-9,a-f = set address, DEL = delete last digit of address"
	.BYTE	ITOK_XY 1,24
	.BYTE	"F1 = I/O space"
	.BYTE	0
	; Yes, I re-render hexdump on wait-key loop. This causes that even changing memory content
	; can be seen changing, for real. At 40Mhz, it's not so much a performance problem noticable. :)
@dump:
@waitkey:
	LDX	#3
:	LDA	dump_start_p,X
	STA	addr_p,X
	DEX
	BPL	:-
	JSR	hex_dump
;@waitkey:
	LDA	$D610
	BEQ	@waitkey
		;JSR	write_inline_string
		;.BYTE	ITOK_XY 0,1
		;.BYTE	0
		;JSR	write_hex_byte
	STA	$D610
	CMP	#'m'
	BEQ	@return
	CMP	#'0'
	BCC	:+
	CMP	#'9'+1
	BCC	@digit_0_to_9
:	CMP	#'a'
	BCC	:+
	CMP	#'f'+1
	BCC	@digit_a_to_f
:	CMP	#'A'
	BCC	:+
	CMP	#'F'+1
	BCC	@digit_a_to_f
:	CMP	#$14		; "DEL" key
	BEQ	@input_addr_backspace
	CMP	#$91		; cursor up
	BEQ	@cursor_up
	CMP	#$11		; cursor down
	BEQ	@cursor_down
	CMP	#$9D		; cursor left
	BEQ	@cursor_left
	CMP	#$1D		; cursor right
	BEQ	@cursor_right
	CMP	#$F1		; F1
	BEQ	@f1
	BRA	@waitkey
@return:
	RTS
@f1:
	SET_HEXDUMP_ADDR_FROM_CONST io
	BRA	@dump
@cursor_left:
	LDA	#0
	LDX	#.LOBYTE(-$1)
	LDY	#$FF
	BRA	@scroll
@cursor_right:
	LDA	#0
	LDX	#$1
	TAY
	BRA	@scroll
@cursor_up:
	LDA	#.LOBYTE(-$10)
	LDX	#$FF
	LDY	#$FF
	BRA	@scroll
@cursor_down:
	LDA	#$10
	LDX	#0
	LDY	#0
	BRA	@scroll
	; A = low byte of addition
	; X = hi byte of addition
	; Y = sign extension: $FF/$00
@scroll:
	CLC
	ADC	dump_start_p
	STA	dump_start_p
	TXA
	ADC	dump_start_p+1
	STA	dump_start_p+1
	TYA
	ADC	dump_start_p+2
	STA	dump_start_p+2
	TYA
	ADC	dump_start_p+3
	STA	dump_start_p+3
	JMP	@dump

@digit_a_to_f:
	AND	#$F
	CLC
	ADC	#9
	BRA	@input_addr
@digit_0_to_9:
	SEC
	SBC	#'0'
	; fall-through
@input_addr:
	LDX	#4
:	CLC
	ROL	dump_start_p+0
	ROL	dump_start_p+1
	ROL	dump_start_p+2
	ROL	dump_start_p+3
	DEX
	BNE	:-
	ORA	dump_start_p
	STA	dump_start_p
	JMP	@dump
@input_addr_backspace:
	LDA	dump_start_p+3
	AND	#$F
	STA	dump_start_p+3
	LDX	#4
:	CLC
	ROR	dump_start_p+3
	ROR	dump_start_p+2
	ROR	dump_start_p+1
	ROR	dump_start_p+0
	DEX
	BNE	:-
	JMP	@dump



; Do not modify this order of the counters, or do not put anything between them!
irq_counter:	.BYTE	0
nmi_counter:	.BYTE	0

nmi_handler:
	INC	nmi_counter
	RTI

irq_handler:
	PHA
	; Check if IRQ source was VIC, if so, use it for scan frequency measurement puproses
	ASL	$D019	; Acknowledge VIC interrupt [ah-ahh, R-M-W opcode ....]
	LDA	rtc_seconds
	CMP	rtc_seconds_old
	BEQ	@same_second
	; Not the same second!
	STA	rtc_seconds_old
	LDA	refresh_rate_temp
	STA	refresh_rate
	LDA	#1
	STA	refresh_rate_temp
	BRA	@eoi
@same_second:
	INC	refresh_rate_temp
	BRA	@eoi
@cia_irq:
	; Otherwise assume it's CIA, irq_counter is printed for that at the bottom
	INC	irq_counter
	; Acknowledge CIA interrupt
@eoi:
	PLA
	RTI


main:
	; Enable MEGA65 VIC-IV I/O mode
	LDA	#$47
	STA	$D02F
	LDA	#$53
	STA	$D02F
	; Check if it's really a MEGA65, also queries HDOS version number
	LDA	#0	; HDOS call number as input
	TAX
	TAY
	HDOSCALL	; if it's really a MEGA65, registers will be modifed!
	CMP	#0	; check those (but not Z, as if it's a C64, it does not exist)
	BNE	@mega65
	CPX	#0
	BNE	@mega65
	CPY	#0
	BNE	@mega65
	; Not a MEGA65
	RTS
@mega65:
	STX	os_version	; OS Version, X=lob
	STA	os_version+1	; OS Version, A=hib
	STZ	os_version+2	; DOS Version, Z=lob
	STY	os_version+3	; DOS Version, Y=hib
	; It's important to disable interrupts!
	SEI
	; Set initial hexdump addr for hexdump mode
	SET_HEXDUMP_ADDR_FROM_CONST zero
	; MEGA65 FAST mode, TODO make sure M65 fast speed is turned off though by the other way so we can easily drop to ~1Mhz when needed
	LDA	#65
	STA	0
	; Set NMI handler (user may hit RESTORE). It "write through" the ROM, no problem.
	LDA	#.LOBYTE(nmi_handler)
	STA	$FFFA
	LDA	#.HIBYTE(nmi_handler)
	STA	$FFFB
	LDA	#.LOBYTE(irq_handler)
	STA	$FFFE
	LDA	#.HIBYTE(irq_handler)
	STA	$FFFF
	; Setup VIC II/III stuffs
	LDA	#0
	STA	$D015
	STA	$D020
	STA	$D021
	LDA	$DD00		; About to change VIC-II bank
	AND	#%11111100
	STA	$DD00
	LDA	#%11001110
	STA	$D018		; chrgen=$F800, video_ram=$F000
	LDA	#4
	STA	$D030
	LDA	#128+32
	STA	$D031		; H640 + attribute mode
	; Copy ROM charset, also slightly modify the order to have kind-of-ASCII layout
	LDA	#1
	STA	1		; make chrgen visible @ $D000, we copy charset from there
	LDX 	#0
@mangle_charset:
        LDA     #$FF
	STA	$F800,X		; well, that's only for making sure chars 0-31 are "blank" to catch problems, etc?
        LDA     $D000+32*8,X
	STA	$F900,X
        LDA     $D000,X
	STA	$FA00,X
        LDA     $D800,X
	STA	$FB00,X
        INX
        BNE     @mangle_charset

	; All RAM-config, but I/O
	LDA	#5
	STA	1
	; Set linear addr of MEGA65 colour RAM (only upper two bytes for now, as it does not change)
	LDA	#$0F
	STA	colour_pos_addr+3
	LDA	#$F8
	STA	colour_pos_addr+2
	; Empty hardware accelerated kbd scanner queue
:	LDA	$D610
	STA	$D610
	BNE	:-

@main_screen_start:
	; TODO: turn of screen, while all the screen is updated, and to provide accurate measurements


	LDA	#%01111111
	STA	$DC0D		; turn off CIA1 IRQs
	AND	$D011
	STA	$D011		; turn off MSB of VIC raster compare
	STA	$D012		; low byte of raster compare (does not matter for us too much, which raster it is)
	LDA	#1
	STA	$D01A		; Enable VIC IRQs

	JSR	clear_screen_with_logo
	JSR	write_inline_string
	.BYTE	ITOK_COLOUR LEGEND_COLOUR
	.BYTE	ITOK_XY	60,5
	.BYTE	"= MENU ="
	.BYTE	ITOK_XY 60,7
	.BYTE	"h = hexdump"
	.BYTE	ITOK_XY 60,8
	.BYTE	"x = exit"
	.BYTE	0
	;
	; *** HW version info ***
	;
	LDA	#0
	STA	xemu_id
	TITLE	1,2,"HW   "
	JSR	update_hwid_screen
	STITLE	" FPGA:"
	LDX	#3
:	LDA	$D632,X
	JSR	write_hex_byte
	CMP	fpga_xemu_const,X
	BNE	:+
	INC	xemu_id
:	DEX
	BPL	:--
	STITLE	" CPLD:"
	LDX	#3
:	LDA	$D62C,X
	JSR	write_hex_byte
	CMP	cpld_xemu_const,X
	BNE	:+
	INC	xemu_id
:	DEX
	BPL	:--
	;
	; *** Is emulator? ***
	;
	TITLE	1,3,"XEMU "
	LDA	xemu_id
	CMP	#8
	BNE	@not_xemu
	; it is Xemu, try to query exact version number
	STITLE	"yes:"
	LDX	#0
:	LDA	$D632,X
	EOR	$D62C,X
	STA	$D632,X
	INX
	CPX	#4
	BNE	:-
	LDX	#0
:	LDA	$D632
	CMP	$D62C
	BNE	@error_xemu
	CMP	#0
	BEQ	@was_xemu
	JSR	write_char
	INX
	CPX	#40
	BEQ	@error_xemu
	BRA	:-
@error_xemu:
	STITLE	" ERROR"
	BRA	@was_xemu
@not_xemu:
	WRISTR	"no"
@was_xemu:
						;WRISTR	"frametime:"
						;JSR	get_frame_time
	;
	; *** HYPPO version trap result ***
	;
	TITLE	1,4,"VER  "
	STITLE	"OS:"
	LDA	os_version+1
	JSR	write_dec_byte
	LDA	#'.'
	JSR	write_char
	LDA	os_version
	JSR	write_dec_byte
	STITLE	" DOS:"
	LDA	os_version+3
	JSR	write_dec_byte
	LDA	#'.'
	JSR	write_char
	LDA	os_version+2
	JSR	write_dec_byte

	TITLE	1,5,"SCAN "
	JSR	get_scanlines_vic2
	LDX	#1	; high byte
	JSR	write_dec_word
	STITLE	" phys:"
	JSR	get_scanlines_vic4
	JSR	write_dec_word
	;
	; *** FPGA BRAM ***
	;
	TITLE	1,6,"BRAM "
	JSR	get_bram_size
	JSR	write_dec_word
	LDA	#'K'
	JSR	write_char
	;
	; *** CRAM size ***
	;
	TITLE	1,7,"CRAM "
	LDA	cram_size	; CRAM size is tested/stored by clear screen! So we just fetch the result here
	JSR	write_dec_byte
	LDA	#'K'
	JSR	write_char
	LDA	cram_echo
	BEQ	:+
	WRISTR	" +echo"
:
	;
	; *** HRAM ***
	;
	TITLE	1,8,"HRAM "
	JSR	get_hram_size
	JSR	write_dec_byte
	LDA	#'M'
	JSR	write_char
	;
	; *** ROM ***
	;
	TITLE	1,9,"ROM  "
	JSR	update_rom_screen
	;
	; *** UUID ***
	;
	TITLE	1,10,"UUID "
	LDA	#$71
	JSR	addr_to_i2c
	LDZ	#0
:	JSR	Lpeek_debounced
	JSR	write_hex_byte
	INZ
	CPZ	#8
	BNE	:-
	;
	; *** MAC ***
	;
	TITLE	1,11,"MAC  "
	LDX	#0
:	LDA	$D6E9,X
	JSR	write_hex_byte
	LDA	#':'
	JSR	write_char
	INX
	CPX	#5
	BNE	:-
	LDA	$D6EE
	JSR	write_hex_byte
	;
	; *** KEEP TIMING STUFF, AND KBD HANDLING ***
	;
	LDA	#SEC_BAR_CHAR
	LDX	#59
:	STA	SEC_BAR_P,X
	DEX
	BPL	:-
	LDA	#0
	STA	glitch_counter
	STA	glitch_counter+1
@kbd_loop:
	JSR	update_clocks_screen
	CLI	; enable interrupts!!!!
	LDA	refresh_rate
	CMP	#45
	BCC	@invalid
	CMP	#65+1
	BCS	@invalid
	JSR	write_inline_string
	.BYTE	ITOK_XY 19,5
	.BYTE	"@ "
	.BYTE	0
	JSR	write_dec_byte
	WRISTR	"Hz  "
@invalid:
	LDA	$D610
	BEQ	@kbd_loop
	STA	$D610
	SEI
	;			JSR	write_inline_string
	;			.BYTE	ITOK_XY 78,0
	;			.BYTE	0
	;			JSR	write_hex_byte
	CMP	#'h'
	BEQ	@hex_dump_mode
	CMP	#'x'
	BEQ	@quit
	BRA	@kbd_loop
	RTS
@hex_dump_mode:
	JSR	hex_dump_mode
	JMP	@main_screen_start
@quit:
	SEI
	LDA	#64
	STA	0
	LDA	#7
	STA	1
	JMP	($FFFC)
